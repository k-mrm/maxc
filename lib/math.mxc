let {
    PI = 3.1415926535897932385;
    E = 2.7182818284590452353;
}

// *は未実装
// 三角関数
// sin(), cos(), tan(), asin(), acos(), *atan()

// 双曲線関数
// *sinh(), *cosh(), *tanh(), *asinh(), *acosh(), *atanh()

// 指数関数, 対数関数
// *exp(), *exp2(), *log(), *log10(), *log2()

// 累乗, 冪根, 絶対値
// pow(), sqrt(), *cbrt(), *hypot(), abs(), *fabs()

// 最近傍整数
// *ceil(), *floor()

// 線形補間
// lerp()

// これは前方宣言が実装されるか前方宣言が要らなくなれば削除
fn __cos(x: float): float {
    if x < 0.00004537856055185252 {
        return 1.0;
    }
    if x < 0.012391837689159725 {
        return 1.0 - x * x * 0.5;
    }
    let x2 = x * x;
    if x < 0.0942477796076937 {
        return 1.0 - x2 * 0.5 + x2 * x2 * 0.041666666666666664;
    }
    let x4 = x2 * x2;
    if(x < 0.2809980095710868) {
        return 1.0 - x2 * 0.5 + x4 * 0.041666666666666664 - 
               x2 * x4 * 0.001388888888888889;
    }
    let x6 = x2 * x4;
    if(x < 0.5689773361501509) {
        return 1.0 - x2 * 0.5 + x4 * 0.041666666666666664 - 
               x6 * 0.001388888888888889 + 
               x2 * x6 * 0.0000248015873015873;
    }
    let x8 = x2 * x6;
    return 1.0 - x2 * 0.5 + x4 * 0.041666666666666664 - 
           x6 * 0.001388888888888889 + 
           x8 * 0.0000248015873015873 - 
           x2 * x8 / 3628800.0;
}

fn sin(x: float): float {
    let sign = 1.0;
    if x < 0.0 {
        sign = -sign;
        x = -x;
    }
    let pi2 = PI * 2.0;
    if x > pi2 {
        x = x % pi2;
    }
    if x > PI {
        sign = -sign;
        x = pi2 - x;
    }
    let piHalf = PI * 0.5;
    let rounding_error = 0.0000000000000001;
    if x > piHalf {
        x = PI - x + rounding_error;
    }
    if x > PI * 0.25 {
        return sign * __cos(piHalf - x + rounding_error);
    }
    let {
        before = x;
        after = x - x * x * x * 0.16666666666666666;
        d = before - after;
        n = 2.0;
        s = 1.0;
        f = 120.0;
        x2 = x * x;
        xx = x * x2 * x2;
    }
    while d > 0.000000001 {
        before = after;
        after = after + s * xx / f;
        s = -s;
        xx = xx * x2;
        n = n + 1.0;
        f = f * 2.0 * n * (2.0 * n + 1.0);
        d = before - after;
        if d < 0.0 {
            d = -d;
        }
    }
    return sign * after;
}

fn cos(x: float): float {
    let sign = 1.0;
    if x < 0.0 {
        x = -x;
    }
    let pi2 = PI * 2.0;
    if x > pi2 {
        x = x % pi2;
    }
    if x > PI {
        x = pi2 - x;
    }
    let piHalf = PI * 0.5;
    let rounding_error = 0.0000000000000001;
    if x > piHalf {
        sign = -sign;
        x = PI - x + rounding_error;
    }
    if x > PI * 0.25 {
        return sign * sin(piHalf - x + rounding_error);
    }
    let {
        before = 1.0;
        after = 1.0 - x * x * 0.5;
        d = before - after;
        n = 2.0;
        s = 1.0;
        f = 24.0;
        x2 = x * x;
        xx = x2 * x2;
    }
    while d > 0.000000001 {
        before = after;
        after = after + s * xx / f;
        s = -s;
        xx = xx * x2;
        n = n + 1.0;
        f = f * 2.0 * n * (2.0 * n - 1.0);
        d = before - after;
        if d < 0.0 {
            d = -d;
        }
    }
    return sign * after;
}

fn tan(x: float): float {
    return sin(x) / cos(x);
}

fn sqrt(x :float): float {
    if x <= 0.0 {
        return 0.0;
    }
    let {
        before = x * 0.5;
        after = (before + x / before) * 0.5;
        d = before - after;
    }
    if d < 0.0 {
        d = -d;
    }
    while d > 0.000000001 {
        before = after;
        after = (before + x / before) * 0.5;
        d = before - after;
    }
    return after;
}

fn asin(x: float): float {
    if x < 0.0 {
        return -asin(-x);
    }
    if x > 1.0 {
        assert x > 1.0;
    }
    if x > 0.7071067811865475 {
        return PI * 0.5 - asin(sqrt(1.0 - x * x));
    }
    if x < 0.0266 {
        return x + x * x * x * 0.16666666666666666;
    }
    let x2 = x * x;
    let x3 = x * x2;
    if x < 0.0807 {
        return x + x3 * 0.16666666666666666 + x2 * x3 * 0.075;
    }
    let x5 = x2 * x3;
    if x < 0.1471 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 +
               x2 * x5 * 0.044642857142857144;
    }
    let x7 = x2 * x5;
    if x < 0.214 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 +
               x7 * 0.044642857142857144 + 
               x2 * x7 * 0.030381944444444444;
    }
    let x9 = x2 * x7;
    if x < 0.276 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x2 * x9 * 0.022372159090909092;
    }
    let x11 = x2 * x9;
    if x < 0.3318 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x11 * 0.022372159090909092 + 
               x2 * x11 * 0.017352764423076924;
    }
    let x13 = x2 * x11;
    if x < 0.3812 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x11 * 0.022372159090909092 + 
               x13 * 0.017352764423076924 + 
               x2 * x13 * 0.01396484375;
    }
    let x15 = x2 * x13;
    if x < 0.4248 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x11 * 0.022372159090909092 + 
               x13 * 0.017352764423076924 + 
               x15 * 0.01396484375 + 
               x2 * x15 * 0.011551800896139705;
    }
    let x17 = x2 * x15;
    if x < 0.4634 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x11 * 0.022372159090909092 + 
               x13 * 0.017352764423076924 + 
               x15 * 0.01396484375 + 
               x17 * 0.011551800896139705 +
               x2 * x17 * 0.009761609529194078;
    }
    let x19 = x2 * x17;
    if x < 0.4976 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x11 * 0.022372159090909092 + 
               x13 * 0.017352764423076924 + 
               x15 * 0.01396484375 + 
               x17 * 0.011551800896139705 +
               x19 * 0.009761609529194078 +
               x2 * x19 * 0.008390335809616815;
    }
    let x21 = x2 * x19;
    if x < 0.528 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x11 * 0.022372159090909092 + 
               x13 * 0.017352764423076924 + 
               x15 * 0.01396484375 + 
               x17 * 0.011551800896139705 +
               x19 * 0.009761609529194078 +
               x21 * 0.008390335809616815 +
               x2 * x21 * 0.0073125258735988454;
    }
    let x23 = x2 * x21;
    if x < 0.5551 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x11 * 0.022372159090909092 + 
               x13 * 0.017352764423076924 + 
               x15 * 0.01396484375 + 
               x17 * 0.011551800896139705 +
               x19 * 0.009761609529194078 +
               x21 * 0.008390335809616815 +
               x23 * 0.0073125258735988454 +
               x2 * x23 * 0.006447210311889649;
    }
    let x25 = x2 * x23;
    if x < 0.5795 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x11 * 0.022372159090909092 + 
               x13 * 0.017352764423076924 + 
               x15 * 0.01396484375 + 
               x17 * 0.011551800896139705 +
               x19 * 0.009761609529194078 +
               x21 * 0.008390335809616815 +
               x23 * 0.0073125258735988454 +
               x25 * 0.006447210311889649 +
               x2 * x25 * 0.005740037670841924;
    }
    let x27 = x2 * x25;
    if x < 0.6015 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x11 * 0.022372159090909092 + 
               x13 * 0.017352764423076924 + 
               x15 * 0.01396484375 + 
               x17 * 0.011551800896139705 +
               x19 * 0.009761609529194078 +
               x21 * 0.008390335809616815 +
               x23 * 0.0073125258735988454 +
               x25 * 0.006447210311889649 +
               x27 * 0.005740037670841924 +
               x2 * x27 * 0.005153309682319905;
    }
    let x29 = x2 * x27;
    if x < 0.6214 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x11 * 0.022372159090909092 + 
               x13 * 0.017352764423076924 + 
               x15 * 0.01396484375 + 
               x17 * 0.011551800896139705 +
               x19 * 0.009761609529194078 +
               x21 * 0.008390335809616815 +
               x23 * 0.0073125258735988454 +
               x25 * 0.006447210311889649 +
               x27 * 0.005740037670841924 +
               x29 * 0.005153309682319905 +
               x2 * x29 * 0.004660143486915096;
    }
    let x31 = x2 * x29;
    if x < 0.6395 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x11 * 0.022372159090909092 + 
               x13 * 0.017352764423076924 + 
               x15 * 0.01396484375 + 
               x17 * 0.011551800896139705 +
               x19 * 0.009761609529194078 +
               x21 * 0.008390335809616815 +
               x23 * 0.0073125258735988454 +
               x25 * 0.006447210311889649 +
               x27 * 0.005740037670841924 +
               x29 * 0.005153309682319905 +
               x31 * 0.004660143486915096 +
               x2 * x31 * 0.004240907093679363;
    }
    let x33 = x2 * x31;
    if x < 0.656 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x11 * 0.022372159090909092 + 
               x13 * 0.017352764423076924 + 
               x15 * 0.01396484375 + 
               x17 * 0.011551800896139705 +
               x19 * 0.009761609529194078 +
               x21 * 0.008390335809616815 +
               x23 * 0.0073125258735988454 +
               x25 * 0.006447210311889649 +
               x27 * 0.005740037670841924 +
               x29 * 0.005153309682319905 +
               x31 * 0.004660143486915096 +
               x33 * 0.004240907093679363 + 
               x2 * x33 * 0.003880964558837669;
    }
    let x35 = x2 * x33;
    if x < 0.6711 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x11 * 0.022372159090909092 + 
               x13 * 0.017352764423076924 + 
               x15 * 0.01396484375 + 
               x17 * 0.011551800896139705 +
               x19 * 0.009761609529194078 +
               x21 * 0.008390335809616815 +
               x23 * 0.0073125258735988454 +
               x25 * 0.006447210311889649 +
               x27 * 0.005740037670841924 +
               x29 * 0.005153309682319905 +
               x31 * 0.004660143486915096 +
               x33 * 0.004240907093679363 + 
               x35 * 0.003880964558837669 +
               x2 * x35 * 0.0035692053938259347;
    }
    let x37 = x2 * x35;
    if x < 0.685 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x11 * 0.022372159090909092 + 
               x13 * 0.017352764423076924 + 
               x15 * 0.01396484375 + 
               x17 * 0.011551800896139705 +
               x19 * 0.009761609529194078 +
               x21 * 0.008390335809616815 +
               x23 * 0.0073125258735988454 +
               x25 * 0.006447210311889649 +
               x27 * 0.005740037670841924 +
               x29 * 0.005153309682319905 +
               x31 * 0.004660143486915096 +
               x33 * 0.004240907093679363 + 
               x35 * 0.003880964558837669 +
               x37 * 0.0035692053938259347 +
               x2 * x37 * 0.003297059503473485;
    }
    let x39 = x2 * x37;
    if x < 0.6978 {
        return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x11 * 0.022372159090909092 + 
               x13 * 0.017352764423076924 + 
               x15 * 0.01396484375 + 
               x17 * 0.011551800896139705 +
               x19 * 0.009761609529194078 +
               x21 * 0.008390335809616815 +
               x23 * 0.0073125258735988454 +
               x25 * 0.006447210311889649 +
               x27 * 0.005740037670841924 +
               x29 * 0.005153309682319905 +
               x31 * 0.004660143486915096 +
               x33 * 0.004240907093679363 + 
               x35 * 0.003880964558837669 +
               x37 * 0.0035692053938259347 +
               x39 * 0.003297059503473485 +
               x2 * x39 * 0.0030578216492580306;
    }
    let x41 = x2 * x39;
    return x + x3 * 0.16666666666666666 + x5 * 0.075 + 
               x7 * 0.044642857142857144 + 
               x9 * 0.030381944444444444 + 
               x11 * 0.022372159090909092 + 
               x13 * 0.017352764423076924 + 
               x15 * 0.01396484375 + 
               x17 * 0.011551800896139705 +
               x19 * 0.009761609529194078 +
               x21 * 0.008390335809616815 +
               x23 * 0.0073125258735988454 +
               x25 * 0.006447210311889649 +
               x27 * 0.005740037670841924 +
               x29 * 0.005153309682319905 +
               x31 * 0.004660143486915096 +
               x33 * 0.004240907093679363 + 
               x35 * 0.003880964558837669 +
               x37 * 0.0035692053938259347 +
               x39 * 0.003297059503473485 +
               x41 * 0.0030578216492580306 +
               x2 * x41 * 0.002846178401108942;
}

fn acos(x: float): float{
    return PI * 0.5 - asin(x);
}

fn atan(x: float): float {
    if x < 0.0 {
        return -atan(-x);
    }
    let rounding_error = 0.0000000000000001;
    if x > 2.414213562373095 {
        return PI * 0.5 - atan(1.0 / x);
    }
    if x > 0.414213562373095 {
        return PI * 0.25 + atan((x - 1.0) / (x + 1.0));
    }
    let {
        before = x;
        after = x - x * x * x * 0.3333333333333333;
        sign = 1.0;
        d = before - after;
        x2 = x * x;
        xx = x * x * x * x2;
        n = 2.0;
    }
    while(d > 0.000000000000001) {
        before = after;
        after = after + sign * xx / (2.0 * n + 1.0);
        xx = xx * x2;
        sign = -sign;
        n = n + 1.0;
        d = before - after;
        if(d < 0.0) {
            d = -d;
        }
    }
    return after;
}

fn pow(x: int, n: int): int {
    let result = 1;
    while n > 1 {
        let {
            n2 = n / 2;
            i = n - (2 * n2);
        }
        if i > 0 {
            result = result * x;
        }
        x = x * x;
        n = n2;
    }
    return result * x;
}

fn abs(i: int) = if i >= 0 i else -i;

fn lerp(a: float, b: float, t: float) = a + t * (b - a);