let {
    PI = 3.1415926535897932385;
    E = 2.7182818284590452353;
}

// *は未実装
// 三角関数
// sin(), cos(), tan(), asin(), acos(), atan()

// 双曲線関数
// *sinh(), *cosh(), *tanh(), *asinh(), *acosh(), *atanh()

// 指数関数, 対数関数
// *exp(), *exp2(), log(), log10(), log2()

// 仮数, 指数
// ldexp(), *frexp(), *modf(), logb()

// 累乗, 冪根, 絶対値
// pow(), sqrt(), *cbrt(), *hypot(), abs(), fabs()

// 最近傍整数
// ceil(), floor()

// 線形補間
// lerp()

def fabs(x: float): float = if x >= 0.0 x else -x;

def __cos(x: float): float {
    let {
        c2 = 0.5;
        c4 = 0.041666666666666664;
        c6 = 0.001388888888888889;
        x2 = x * x;
        before = 1.0 - x2 * (c2 - x2 * c4);
        after = 1.0 - x2 * (c2 - x2 * (c4 - x2 * c6));
        d = before - after;
        n = 4.0;
        s = 1.0;
        f = 40320.0;
        x4 = x2 * x2;
        xx = x4 * x4;
    }
    while d > 0.0000000000000001 {
        before = after;
        after = after + s * xx / f;
        s = -s;
        xx = xx * x2;
        n = n + 1.0;
        f = f * 2.0 * n * (2.0 * n - 1.0);
        d = before - after;
        if(d < 0.0) {
            d = -d;
        }
    }
    return after;
}

def sin(x: float): float {
    let sign = 1.0;
    let pi2 = PI * 2.0;
    if fabs(x) > pi2 {
        x = x % pi2;
    }
    if fabs(x) > PI {
        sign = -sign;
        x = pi2 - x;
    }
    let piHalf = PI * 0.5;
    let rounding_error = 0.0000000000000001;
    if fabs(x) > piHalf {
        x = PI - x + rounding_error;
    }
    if fabs(x) > PI * 0.25 {
        return sign * __cos(piHalf - x + rounding_error);
    }
    let {
        s3 = 0.16666666666666666;
        s5 = 0.008333333333333333;
        s7 = 0.0001984126984126984;
        x2 = x * x;
        before = x * (1.0 - x2 * (s3 + x2 * s5));
        after = x * (1.0 - x2 * (s3 + x2 * (s5 - x2 * s7)));
        d = before - after;
        n = 4.0;
        s = 1.0;
        f = 362880.0;
        x4 = x2 * x2;
        xx = x * x4 * x4;
    }
    while d > 0.0000000000000001 {
        before = after;
        after = after + s * xx / f;
        s = -s;
        xx = xx * x2;
        n = n + 1.0;
        f = f * 2.0 * n * (2.0 * n + 1.0);
        d = before - after;
        if d < 0.0 {
            d = -d;
        }
    }
    return sign * after;
}

def cos(x: float): float {
    let sign = 1.0;
    let pi2 = PI * 2.0;
    if fabs(x) > pi2 {
        x = x % pi2;
    }
    if fabs(x) > PI {
        x = pi2 - x;
    }
    let piHalf = PI * 0.5;
    let rounding_error = 0.0000000000000001;
    if fabs(x) > piHalf {
        sign = -sign;
        x = PI - x + rounding_error;
    }
    if fabs(x) > PI * 0.25 {
        return sign * sin(piHalf - x + rounding_error);
    }
    let {
        c2 = 0.5;
        c4 = 0.041666666666666664;
        c6 = 0.001388888888888889;
        x2 = x * x;
        before = 1.0 - x2 * (c2 - x2 * c4);
        after = 1.0 - x2 * (c2 - x2 * (c4 - x2 * c6));
        d = before - after;
        n = 4.0;
        s = 1.0;
        f = 40320.0;
        x4 = x2 * x2;
        xx = x4 * x4;
    }
    while d > 0.0000000000000001 {
        before = after;
        after = after + s * xx / f;
        s = -s;
        xx = xx * x2;
        n = n + 1.0;
        f = f * 2.0 * n * (2.0 * n - 1.0);
        d = before - after;
        if d < 0.0 {
            d = -d;
        }
    }
    return sign * after;
}

def tan(x: float): float {
    return sin(x) / cos(x);
}

def sqrt(x :float): float {
    if x <= 0.0 {
        return 0.0;
    }
    let {
        before = x * 0.5;
        after = (before + x / before) * 0.5;
    }
    while after != before {
        before = after;
        after = (before + x / before) * 0.5;
    }
    return after;
}

def asin(x: float): float {
    if x < 0.0 {
        return -asin(-x);
    }
    if x > 1.0 {
        assert x > 1.0;
    }
    if x > 0.7071067811865475 {
        return PI * 0.5 - asin(sqrt(1.0 - x * x));
    }
    let s = [
        1.0,
        0.16666666666666666,
        0.075,
        0.044642857142857144,
        0.030381944444444444,
        0.022372159090909092,
        0.017352764423076924,
        0.01396484375,
        0.011551800896139705,
        0.009761609529194078,
        0.008390335809616815,
        0.0073125258735988454,
        0.006447210311889649,
        0.005740037670841924,
        0.005153309682319905,
        0.004660143486915096,
        0.004240907093679363,
        0.003880964558837669,
        0.0035692053938259347,
        0.003297059503473485,
        0.0030578216492580306,
        0.002846178401108942
    ];
    let {
        s1 = s[1];
        s2 = s[2];
        s3 = s[3];
        x2 = x * x;
        before = x * (1.0 + x2 * (s1 + x2 * s2));
        after = x * (1.0 + x2 * (s1 + x2 * (s2 + x2 * s3)));
        d = after - before;
        x4 = x2 * x2;
        xx = x * x4 * x4;
    }

    let n = 4;
    
    while d != 0.0 && n < 22 {
        before = after;
        after = after + xx * s[n];
        n = n + 1;
        xx = xx * x2;
        d = after - before;
    }
    return after;
}

def acos(x: float): float{
    return PI * 0.5 - asin(x);
}

def atan(x: float): float {
    if x < 0.0 {
        return -atan(-x);
    }
    let rounding_error = 0.0000000000000001;
    if x > 2.414213562373095 {
        return PI * 0.5 - atan(1.0 / x);
    }
    if x > 0.414213562373095 {
        return PI * 0.25 + atan((x - 1.0) / (x + 1.0));
    }
    let {
        before = x;
        after = x - x * x * x * 0.3333333333333333;
        sign = 1.0;
        d = before - after;
        x2 = x * x;
        xx = x * x * x * x2;
        n = 2.0;
    }
    while(d > 0.0000000000000001) {
        before = after;
        after = after + sign * xx / (2.0 * n + 1.0);
        xx = xx * x2;
        sign = -sign;
        n = n + 1.0;
        d = before - after;
        if(d < 0.0) {
            d = -d;
        }
    }
    return after;
}

def pow(x: int, n: int): int {
    let result = 1;
    while n > 1 {
        let {
            n2 = n / 2;
            i = n - (2 * n2);
        }
        if i > 0 {
            result = result * x;
        }
        x = x * x;
        n = n2;
    }
    return result * x;
}

def log10(x: float): float {
    if x <= 0.0 {
        return 0.0;
    }
    let n = 0.0;
    while x < 1.0 {
        x = x * 10.0;
        n = n - 1.0;
    }
    while x >= 2.0 {
        x = x * 0.1;
        n = n + 1.0;
    }
    if x == 1.0 {
        return n;
    }
    let retval = n;
    let add = 0.5;
    while add > 0.0000000000000001 {
        x = x * x;
        if x >= 10.0 {
            retval = retval + add;
            x = x * 0.1;
        }
        add = add * 0.5;
    }
    return retval;
}

def log2(x: float): float {
    return 3.321928094887362 * log10(x);
}

def log(x: float): float {
    return 2.302585092994046 * log10(x);
}

def ldexp(x: float, exp: int): float = x * tofloat(pow(2, exp));

def abs(i: int) = if i >= 0 i else -i;

def ceil(x: float): int {
    let n = toint(x);
    if tofloat(n) < x {
        return n + 1;
    }
    else {
        return n;
    }
}

def floor(x: float): int {
    let n = toint(x);
    if tofloat(n) > x {
        return n - 1;
    }
    else {
        return n;
    }
}

def logb(x: float): int {
    return floor(log2(x));
}

def lerp(a: float, b: float, t: float) = a + t * (b - a);